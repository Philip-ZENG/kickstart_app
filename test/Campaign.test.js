const assert = require('assert');
const ganache = require('ganache-cli');
const Web3 = require('web3');
// Build a local ethereum test network with provided accounts (ganache), and provide an interface to it (web3)
const web3 = new Web3(ganache.provider());

// The two compiled contract in JSON format
const compiledFactory = require('../ethereum/build/CampaignFactory.json');
const compiledCampaign = require('../ethereum/build/Campaign.json');

// Acounts created in the local network (10 accounts are generated by default by ganache)
let accounts;
// Address to the factory contract
let factory;
let campaignAddress;
let campaign;

// Executed before each test case starts
beforeEach(async () => {
  accounts = await web3.eth.getAccounts();
  
  // Create factory contract instnace (Parse JSON formate to javascript object)
  factory = await new web3.eth.Contract(JSON.parse(compiledFactory.interface))
    .deploy({ data: compiledFactory.bytecode }) // deploy contract to network
    .send({ from: accounts[0], gas: '1000000' }); // contract creator is accounts[0]
  
  // Use the factory contract to create campaign contract instance
  await factory.methods.createCampaign('100').send({
    from: accounts[0],
    gas: '1000000'
  });

  // Read addresses of all the deployed contract
  const addresses = await factory.methods.getDeployedCampaigns().call();
  // Get the address of a specific contract that has just been deployed
  campaignAddress = addresses[0];
  // Alternative approach of the 2 lines above:
  // [campaignAddress] = = await factory.methods.getDeployedCampaigns().call();

  // Access the deployed contract at the `campaignAddress`
  campaign = await new web3.eth.Contract(
    JSON.parse(compiledCampaign.interface),
    campaignAddress
  );
});

describe('Campaigns', () => {
  it('deploys a factory and a campaign', () => {
    // Check if the two deployed contract has an address 
    // (which indicates the contract is successfully deployed)
    assert.ok(factory.options.address);
    assert.ok(campaign.options.address);
  });

  // Check if the manager of the campaign contract is the caller to the `createCampaign` function in factory contract
  it('makrs caller as the campaign manager', async () => {
    const manager = await campaign.methods.manager().call();
    assert.equal(manager,accounts[0]);
  });

  // Donate money to the campaign and check if the contributor is successfuly marked as approver
  it('allows people to contribute money and marks them as approvers', async () => {
    // Contribute money to the campaign
    await campaign.methods.contribute().send({
      value: '200',
      from: accounts[1]
    });
    // Access the bool value in the mapping
    const isContributor = await campaign.methods.approvers(accounts[1]).call();
    // If the `isContributor` is a `False`, then the assert will fail
    assert(isContributor);
  });

  // Test that with a donation lower than the minimum contritution threshold, we will fail in the transaction
  it('requires a minimum contribution', async () => {
    try {
      // Send a value is obviously below the minimum requirement to become a contributor
      await campaign.methods.contribute().send({
        value: '5',
        from: accounts[1]
      });
      assert(false);
    } catch (err) {
      // Check there is indeed an error thrown
      assert(err);
    }
  });

  it('allows a manager to make a payment request', async () => {
    // Create a new request
    await campaign.methods
      .createRequest('Buy batteries', '100', accounts[1])
      .send({
        from: accounts[0],
        gas: '1000000'
      });
    
    // Get the created request
    const request = await campaign.methods.requests(0).call();

    assert.equal('Buy batteries', request.description);
  });

  it('process requests', async () => {
    // Contribute to the campaign
    await campaign.methods.contribute().send({
      from: accounts[0],
      value: web3.utils.toWei('10','ether')
    });

    // Create request
    await campaign.methods
      .createRequest('A', web3.utils.toWei('5', 'ether'), accounts[1])
      .send({ from: accounts[0], gas: '1000000'})

    // Approve request
    await campaign.methods.approveRequest(0).send({
      from: accounts[0],
      gas: '1000000'
    });

    // Finalize request (which transfer the ether to recipient)
    await campaign.methods.finalizeRequest(0).send({
      from: accounts[0],
      gas: '1000000'
    });

    // Get balance of the account that receives the money
    let balance = await web3.eth.getBalance(accounts[1]);
    balance = web3.utils.fromWei(balance, 'ether');
    balacne = parseFloat(balance);
    console.log(balance);
    assert(balance > 104);
  });
});